

<h2>Events matching your search</h2>

<div >
	<ul class="tabs" data-tabs="tabs"> 		
		<li class="active"><a href="#map">View As Map</a></li>	
		<li><a href="#list">View As List</a></li>			
	</ul>	
	<div id="my-tab-content" class="tab-content">
			
		<div id="map" class="active">
		    <!-- Create map here -->	    
		</div>
		<div id="list" >
			<div class="search">
	            	<select class="orderBy">
	            		<option value="">Order By...</option>
	            		<option value="Nearest">Nearest First</option>
	            		<option value="Date">Date</option>
	            		<option value="Alpha">A - Z</option>
	            	</select>
	            	
	        </div>   
	                		
			<ul>
				<% @locations.each do | event | %>
				<li>
					<a href="/event/<%= event.id %>"><%= event.title %></a>
					<p><%= event.description %></p>
					<p><%= ((getDistance(@location.lat.to_f, @location.lng.to_f, event.location[1], event.location[0])/1000) *  0.621371192).round(0) %>
					Miles from <%= @search[:postcode]%></o>
				</li>
				<% end %>	
			</ul>
		</div>
		
	</div>
</div>


<% content_for :sidebar do %>
    <h3>Event Search</h3>
<!-- maps javascript-->

<form action="/event/results/" method="get">
	    <div class="clearfix">
	        <label for="location" title="This is a required field">Location:</label>
	        <input id="location" name="postcode" type="text" value="<%= @search[:postcode] %>">
	    </div>
	    
	    <div class="clearfix">
	        <label for="radius">Distance:</label>
            <select name="radius" id="radius">
                <% DISTANCE.each do |key, value| %>
                    <option value="<%= key %>"
                        <% if @search[:radius].to_s == key.to_s %>
                            selected="selected"
                        <% end %>
                    ><%= value %></option>
                <% end %>
            </select>
	    </div>
	    
	    <div class="clearfix">
	        <label for="searchType">Type:</label>
            <select name="type" id="type">
                <% CATEGORIES.each do |key, value| %>
                    <option value="<%= key %>"
                        <% if @search[:type] == key.to_s %>
                            selected="selected"
                        <% end %>
                    ><%= value %></option>
                <% end %>
            </select>
	    </div>
	    
	    <div class="clearfix">
	        <label for="dateFrom">Date From:</label>
	        <input type="date" id="dateFrom" name="afterDate" value="<%= @search[:afterDate] %>">
	        
	        <label for="dateTo">Date To:</label>
	        <input type="date" id="dateTo" name="beforeDate" value="<%= @search[:beforeDate] %>">
	    </div>
	        
			<input type="submit" value="Search" class="btn primary">
	
	</form>
<% end %>
<% content_for :js_footer do %>
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js" type="text/javascript"></script>
<script type="text/javascript" src="../../js/Fluster2.js"></script>
<script type="text/javascript" src="../../js/bootstrap.js"></script>
<script src="http://maps.googleapis.com/maps/api/js?sensor=false&amp;libraries=places" type="text/javascript"></script>
<!--google maps script-->
<script type="text/javascript">  

    var postCode = '<%= @search[:postcode].to_s %>';

    var radius = '<%= @search[:radius].to_s %>';
    
    var latlng = new google.maps.LatLng(51.0, 0);
    
    $(document).ready(function () {
    	$('.tabs').tabs();
		$('.tabs').bind('change', function (e) {
  			e.target// activated tab
  			e.relatedTarget // previous tab
  		});
        geocodePostcode(postCode);
        
        var input = document.getElementById('location');
        var defaultBounds = new google.maps.LatLngBounds(
  			new google.maps.LatLng(50.092393,-12.480469),
  			new google.maps.LatLng(59.063154,2.658691));
        var options = {
  		bounds: defaultBounds
		};
        var autocomplete = new google.maps.places.Autocomplete(input, options);   
    });
    
    function geocodePostcode(postcode) {
        var geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': postcode }, function (results, status) {
            if (status == "OK") {
                latlng = results[0].geometry.location;
                var myOptions = {

                    zoom: 10,
                    zoom: 10,
                    center: latlng,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                //Create Map
                var map = new google.maps.Map(document.getElementById("map"), myOptions);

                var marker, markerset = [];

                //lots of Test data
                var json = [];
                
                <% @locations.each_with_index do |event, i|  %>
                	var description = htmlEncode("<%= event.description%>");
                	var title = htmlEncode("<%= event.title%>");
					json[<%= i%>] = { 'id': '<%= event.id %> ', 'lng': '<%= event.location[0]%>', 'lat': '<%= event.location[1] %>', 'desc' : description, 'title' : title}
                <% end %>
                
               
                for (var i = 0; i < json.length; i++) {
                							 	  //location -->						 <!--ID--> <!--title--> <!--Description-->
                    marker = newMarker(new google.maps.LatLng(json[i].lat, json[i].lng), json[i].id, json[i].title, json[i].desc);
                    markerset.push(marker);
                }
                
                
                var fluster = new MarkerClusterer(map, markerset);

                function newMarker(markerLocation, Id, markerTitle, markerDescription) {
                	var image = '../../img/info.png';
                    var marker = new google.maps.Marker({icon: image, position: markerLocation, title: markerTitle });
                    var contentString = '<div id="' + Id + '"><a href="/event/' + Id + '" title="' + markerTitle + '">'+ markerTitle + '</a> <br>'+markerDescription+'</div>';
                    
                    var infowindow = new google.maps.InfoWindow({ content: contentString });
                    google.maps.event.addListener(marker, 'click', function () {
                        infowindow.open(map, marker);
                    });
                    return marker;
                }
                
                //Radius
                var radiusInMeters = radius * 1609.344;
                var radiusCircle;
                var radiusOptions = {
                    strokeColor: "#00ffff",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#00ffff",
                    fillOpacity: 0.35,
                    map: map,
                    center: latlng,
                    radius: radiusInMeters
                };
                radiusCircle = new google.maps.Circle(radiusOptions);
            }
            else {
                console.log("Unable to geocode location");
            }
        });
    }
    var htmlEncode = function (source, display, tabs) {
	var i, s, ch, peek, line, result,
		next, endline, push,
		spaces;
	
	// Stash the next character and advance the pointer
	next = function () {
		peek = source.charAt(i);
		i += 1;
	};
	
	// Start a new "line" of output, to be joined later by <br />
	endline = function () {
		line = line.join('');
		if (display) {
			// If a line starts or ends with a space, it evaporates in html
			// unless it's an nbsp.
			line = line.replace(/(^ )|( $)/g, '&nbsp;');
		}
		result.push(line);
		line = [];
	};
	
	// Push a character or its entity onto the current line
	push = function () {
		if (ch < ' ' || ch > '~') {
			line.push('&#' + ch.charCodeAt(0) + ';');
		} else {
			line.push(ch);
		}
	};
	
	// Use only integer part of tabs, and default to 4
	tabs = (tabs >= 0) ? Math.floor(tabs) : 4;
	
	result = [];
	line = [];

	i = 0;
	next();
	while (i <= source.length) { // less than or equal, because i is always one ahead
		ch = peek;
		next();
		
		// HTML special chars.
		switch (ch) {
		case '<':
			line.push('&lt;');
			break;
		case '>':
			line.push('&gt;');
			break;
		case '&':
			line.push('&amp;');
			break;
		case '"':
			line.push('&quot;');
			break;
		case "'":
			line.push('&#39;');
			break;
		default:
			// If the output is intended for display,
			// then end lines on newlines, and replace tabs with spaces.
			if (display) {
				switch (ch) {
				case '\r':
					// If this \r is the beginning of a \r\n, skip over the \n part.
					if (peek === '\n') {
						next();
					}
					endline();
					break;
				case '\n':
					endline();
					break;
				case '\t':
					// expand tabs
					spaces = tabs - (line.length % tabs);
					for (s = 0; s < spaces; s += 1) {
						line.push(' ');
					}
					break;
				default:
					// All other characters can be dealt with generically.
					push();
				}
			} else {
				// If the output is not for display,
				// then none of the characters need special treatment.
				push();
			}
		}
	}
	endline();
	
	// If you can't beat 'em, join 'em.
	result = result.join('<br />');

	if (display) {
		// Break up contiguous blocks of spaces with non-breaking spaces
		result = result.replace(/ {2}/g, ' &nbsp;');
	}
	
	// tada!
	return result;
};
</script>  
<script>
	
</script>
<% end %>
